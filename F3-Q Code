<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>F3 "Q" Workout Planner</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
      @font-face {
        font-family: 'LucideIcons';
        src: url(https://cdn.jsdelivr.net/npm/lucide-static@latest/font/lucide.ttf) format('truetype');
      }
      .lucide {
        font-family: 'LucideIcons';
        font-style: normal;
        font-weight: normal;
        line-height: 1;
        letter-spacing: normal;
        text-transform: none;
        display: inline-block;
        white-space: nowrap;
        word-wrap: normal;
        direction: ltr;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        text-rendering: optimizeLegibility;
        font-feature-settings: "liga";
      }
      /* Style for JS-controlled tooltip */
      #js-tooltip {
        position: absolute;
        background-color: #1f2937; /* gray-800 */
        color: #e5e7eb; /* gray-200 */
        border: 1px solid #374151; /* gray-700 */
        padding: 6px 12px;
        border-radius: 6px;
        font-size: 0.85em;
        white-space: nowrap;
        z-index: 50;
        pointer-events: none;
        transition: opacity 0.2s;
      }
      /* Style for copy button feedback */
      .copied-feedback {
          background-image: linear-gradient(to right, #10b981, #22c55e) !important;
      }
      .copy-failed-feedback {
          background-image: linear-gradient(to right, #ef4444, #dc2626) !important;
      }
      /* Style for clickable exercises */
      .clickable-exercise {
          cursor: pointer;
          border-bottom: 1px dashed rgba(96, 165, 250, 0.5);
          padding-bottom: 1px;
          transition: border-color 0.2s ease-in-out;
      }
       .clickable-exercise:hover {
           border-bottom-color: rgba(96, 165, 250, 1);
       }
      .clickable-exercise .lucide {
          opacity: 0;
          transition: opacity 0.2s ease-in-out;
          font-size: 0.9em;
          vertical-align: middle;
          margin-left: 4px;
      }
      .clickable-exercise:hover .lucide {
          opacity: 0.8;
      }
      /* Style for no replacement feedback */
      .no-replace-flash {
          transition: background-color 0.1s ease-in-out;
          background-color: rgba(239, 68, 68, 0.3) !important;
          border-radius: 4px;
      }
      /* Style for hover on list items containing exercises */
      .exercise-list-item:hover {
        background-color: rgba(55, 65, 81, 0.3);
      }
      /* Modal styles */
      .modal-overlay {
          transition: opacity 0.3s ease-in-out;
      }
      .modal-content {
          transition: transform 0.3s ease-in-out;
      }

    </style>
    <script>
      tailwind.config = {
        theme: {
          extend: {
            fontFamily: {
              sans: ['Inter', 'sans-serif'],
            },
          }
        }
      }
    </script>
</head>
<body class="bg-gradient-to-b from-gray-900 to-gray-800 text-gray-200 font-sans p-4 md:p-8 min-h-screen">

    <div id="js-tooltip" class="hidden opacity-0">Tooltip text</div>

    <div class="max-w-3xl mx-auto relative">
        <header class="text-center mb-10">
            <button id="menu-btn" aria-label="Open Exercise Library" class="absolute top-0 right-0 mt-1 mr-1 p-2 text-gray-400 hover:text-blue-400 transition duration-150 ease-in-out z-10">
                <span class="lucide text-2xl">&#xe953;</span> {/* menu icon */}
            </button>

            <h1 class="text-4xl md:text-5xl font-bold text-blue-400 mb-2">F3 "Q" Workout Planner</h1>
            <p class="text-lg text-gray-400 italic mt-1 mb-3">Fitness, Fellowship, and Faith</p>
            <p class="text-gray-300 text-lg">Generate a 45-minute workout structure. Click exercises for info, double-click to replace!</p>
            <p class="text-sm text-gray-500 mt-2">Location Hints: Stadium, Hills, Beach, Parking Lot, Stairs, Walls, Handrails</p>
        </header>

        <div class="text-center mb-10 space-x-4">
            <button id="generate-btn" class="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-bold py-3 px-8 rounded-lg shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition duration-200 ease-in-out inline-flex items-center">
                <span class="lucide mr-2 text-lg">&#xea4c;</span> Generate Workout
            </button>
            <button id="copy-btn" class="bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800 text-white font-bold py-3 px-8 rounded-lg shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition duration-200 ease-in-out inline-flex items-center disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                <span class="lucide mr-2 text-lg">&#xe913;</span> Copy Workout
            </button>
        </div>

        <div id="workout-output" class="space-y-8">
            <div class="bg-gray-800/80 backdrop-blur-sm p-6 rounded-lg shadow-lg border border-gray-700">
                <h2 class="text-2xl font-semibold text-blue-300 mb-3 border-b border-gray-600 pb-2 flex items-center"><span class="lucide mr-3 text-xl text-blue-300">&#xe8e5;</span>Workout Plan</h2>
                <p class="text-gray-300 italic">Click the "Generate Workout" button above to create a plan. Remember to adjust reps and timing as needed!</p>
            </div>
        </div>
    </div>

    <div id="library-modal" class="hidden fixed inset-0 z-50 overflow-y-auto" aria-labelledby="library-title" role="dialog" aria-modal="true">
        <div class="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div id="library-overlay" class="fixed inset-0 bg-gray-900 bg-opacity-75 modal-overlay opacity-0" aria-hidden="true"></div>

            <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
            <div class="modal-content inline-block align-bottom bg-gray-800 rounded-lg text-left overflow-hidden shadow-xl transform sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full scale-95 opacity-0">
                <div class="bg-gray-800 px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                    <div class="sm:flex sm:items-start">
                        <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                            <h3 class="text-2xl leading-6 font-bold text-blue-400 mb-4 flex items-center" id="library-title">
                                <span class="lucide mr-3 text-xl text-blue-400">&#xe8b6;</span> {/* Library icon */}
                                Exercise Library (Exicon)
                            </h3>
                            <div class="mt-2 max-h-[60vh] overflow-y-auto pr-2">
                                <ul id="library-list" class="space-y-3 text-gray-300">
                                    <li>Loading...</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-800 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse border-t border-gray-700">
                    <button type="button" id="close-library-btn" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-600 shadow-sm px-4 py-2 bg-gray-700 text-base font-medium text-gray-200 hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-blue-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm transition duration-150 ease-in-out">
                        Close
                    </button>
                </div>
            </div>
        </div>
    </div>


    <script>
        // --- F3 Exercise Data (Single Definition) ---
        const exercises = [
             // Warm-up (Type: W)
            { f3Name: "SSH", standardName: "Side Straddle Hop / Jumping Jack", type: "W", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Imperial Walker", standardName: "Imperial Walker (Alt. Elbow to Knee)", type: "W", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Hillbilly Walker", standardName: "Walking Calf Raises", type: "W", locations: ["Parking Lot", "Stadium", "Beach", "Hills"] },
            { f3Name: "High Knees", standardName: "High Knees", type: "W", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Butt Kicker", standardName: "Butt Kicker", type: "W", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Overhead Clap", standardName: "Overhead Arm Claps", type: "W", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Seal Clap", standardName: "Seal Claps (Front Arm Claps)", type: "W", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Sun Gods", standardName: "Arm Circles (Forward/Backward)", type: "W", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Michael Phelps", standardName: "Wide Arm Swings", type: "W", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Good Morning", standardName: "Good Morning (Hamstring Stretch)", type: "W", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Windmill", standardName: "Windmill Stretch", type: "W", locations: ["Parking Lot", "Stadium", "Beach"] },
            // Thang Exercises (Type: T)
            { f3Name: "Merkin", standardName: "Push-up", type: "T", locations: ["Parking Lot", "Stadium", "Beach", "Stairs", "Walls"] },
            { f3Name: "Diamond Merkin", standardName: "Diamond Push-up", type: "T", locations: ["Parking Lot", "Stadium", "Beach", "Stairs", "Walls"] },
            { f3Name: "Wide Merkin", standardName: "Wide Push-up", type: "T", locations: ["Parking Lot", "Stadium", "Beach", "Stairs", "Walls"] },
            { f3Name: "Staggered Merkin", standardName: "Staggered Hand Push-up", type: "T", locations: ["Parking Lot", "Stadium", "Beach", "Stairs", "Walls"] },
            { f3Name: "Incline Merkin", standardName: "Incline Push-up", type: "T", locations: ["Stairs", "Walls", "Handrails"] },
            { f3Name: "Decline Merkin", standardName: "Decline Push-up", type: "T", locations: ["Stairs", "Walls"] },
            { f3Name: "Hand Release Merkin", standardName: "Hand Release Push-up", type: "T", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Squat", standardName: "Air Squat", type: "T", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Jump Squat", standardName: "Jump Squat", type: "T", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Sumo Squat", standardName: "Sumo Squat", type: "T", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Pistol Squat", standardName: "Single Leg Squat (Assisted/Unassisted)", type: "T", locations: ["Parking Lot", "Stadium", "Beach", "Walls"] },
            { f3Name: "Monkey Humper", standardName: "Air Squat variation (w/ hip thrust)", type: "T", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Lunge", standardName: "Lunge", type: "T", locations: ["Parking Lot", "Stadium", "Beach", "Hills"] },
            { f3Name: "Reverse Lunge", standardName: "Reverse Lunge", type: "T", locations: ["Parking Lot", "Stadium", "Beach", "Hills"] },
            { f3Name: "Split Jack", standardName: "Lunge Jumps", type: "T", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Bonnie Blairs", standardName: "Skater Jumps", type: "T", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Burpee", standardName: "Burpee", type: "T", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Eight-count Body Builder", standardName: "8-Count Burpee", type: "T", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Man Maker", standardName: "Man Maker (Burpee variation w/ weights)", type: "T", locations: ["Parking Lot"] },
            { f3Name: "Bear Crawl", standardName: "Bear Crawl", type: "T", locations: ["Parking Lot", "Stadium", "Beach", "Hills"] },
            { f3Name: "Crab Walk", standardName: "Crab Walk", type: "T", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Sprint", standardName: "Sprint", type: "T", locations: ["Parking Lot", "Stadium", "Beach", "Hills"] },
            { f3Name: "Bernie Sanders", standardName: "Backwards Run", type: "T", locations: ["Parking Lot", "Stadium", "Beach", "Hills"] },
            { f3Name: "Hill Sprint", standardName: "Hill Sprint", type: "T", locations: ["Hills"] },
            { f3Name: "Stair Climb / Run", standardName: "Stair Climb / Run", type: "T", locations: ["Stairs", "Stadium"] },
            { f3Name: "Step Up", standardName: "Step Up", type: "T", locations: ["Stairs", "Walls"] },
            { f3Name: "Box Jump / Ledge Jump", standardName: "Box Jump / Ledge Jump", type: "T", locations: ["Stairs", "Walls"] },
            { f3Name: "Dips", standardName: "Tricep Dips", type: "T", locations: ["Stairs", "Handrails", "Walls"] },
            { f3Name: "People's Chair", standardName: "Wall Sit", type: "T", locations: ["Walls", "Stadium"] },
            { f3Name: "Balls to the Wall", standardName: "Handstand Hold (against wall)", type: "T", locations: ["Walls"] },
            { f3Name: "Australian Pull-up", standardName: "Inverted Row / Aussie Pull-up", type: "T", locations: ["Handrails", "Stadium"] },
            { f3Name: "Dirty Hookup", standardName: "Burpee + Pull-up (if bar avail)", type: "T", locations: ["Handrails", "Stadium"] },
            // Mary Exercises (Type: M)
            { f3Name: "LBC", standardName: "Little Baby Crunch", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "American Hammer", standardName: "Russian Twist variation", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Freddie Mercury", standardName: "Flutter Kicks variation", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Box Cutter", standardName: "Reverse Crunch variation", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Dolly", standardName: "Leg Hold (6 inches)", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Hello Dolly", standardName: "Leg Spreaders (from Dolly)", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Rosalita", standardName: "Leg Lifts (from Dolly)", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Flutter Kicks", standardName: "Flutter Kicks", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Plank", standardName: "Plank Hold", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Plank Jack", standardName: "Plank Jack", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Side Plank", standardName: "Side Plank Hold (L/R)", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Superman", standardName: "Superman Hold", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Pickle Pounder", standardName: "Heel Taps (lying down)", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Gas Pumper", standardName: "Legs bent, push feet to sky", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Crunchy Frog", standardName: "Crunchy Frog (Tuck Crunch)", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Low Slow Flutter", standardName: "Slow Flutter Kicks (near ground)", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
        ];

        // --- DOM Elements ---
        const generateBtn = document.getElementById('generate-btn');
        const copyBtn = document.getElementById('copy-btn');
        const outputDiv = document.getElementById('workout-output');
        const jsTooltip = document.getElementById('js-tooltip');
        const menuBtn = document.getElementById('menu-btn');
        const libraryModal = document.getElementById('library-modal');
        const libraryOverlay = document.getElementById('library-overlay');
        const closeLibraryBtn = document.getElementById('close-library-btn');
        const libraryList = document.getElementById('library-list');

        // --- Global State ---
        let currentTooltipTarget = null;

        // --- Helper Functions (Single Definitions) ---
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }

        function getExercisesByType(type, count, excludeNames = []) {
            const availableExercises = exercises.filter(ex =>
                ex.type === type && !excludeNames.includes(ex.f3Name)
            );
            return shuffleArray([...availableExercises]).slice(0, count);
        }

        function getRepHint(type) {
            if (type === 'W') return '<span class="text-xs text-gray-400 ml-1">(~15-20 IC)</span>';
            if (type === 'M') return '<span class="text-xs text-gray-400 ml-1">(~1 min or count)</span>';
            if (type === 'T') return '<span class="text-xs text-gray-400 ml-1">(Q Choice: Reps/Time)</span>';
            return '';
        }

        function formatExercise(exercise) {
            return `<span class="clickable-exercise inline-flex items-center group"
                          data-type="${exercise.type}"
                          data-current-exercise="${exercise.f3Name}"
                          data-standard-name="${exercise.standardName}">
                        ${exercise.f3Name}
                        <span class="lucide ml-1 opacity-0 group-hover:opacity-80 transition-opacity text-blue-400">&#xea4c;</span>
                    </span>`;
        }

        async function copyWorkout() {
            let workoutText = "";
            outputDiv.querySelectorAll('div[data-section]').forEach(section => {
                const titleElement = section.querySelector('h2');
                const listElement = section.querySelector('ul');
                const paraElements = section.querySelectorAll('p');
                if (titleElement) {
                    const titleText = titleElement.textContent ? titleElement.textContent.trim() : '';
                    workoutText += `\n--- ${titleText} ---\n`;
                }
                 paraElements.forEach(para => {
                     if (para.classList.contains('italic') || section.dataset.section === 'disclaimer') {
                         workoutText += `${para.innerText.trim()}\n`;
                     }
                 });
                 if (listElement) {
                    listElement.querySelectorAll('li').forEach(item => {
                        const clickableSpan = item.querySelector('.clickable-exercise');
                        let f3Name = item.textContent ? item.textContent.split('(')[0].trim() : '';
                        if (clickableSpan && clickableSpan.dataset.currentExercise) {
                            f3Name = clickableSpan.dataset.currentExercise;
                        }
                        if (f3Name.toLowerCase().includes('mosey') || f3Name.toLowerCase().includes('sprint') || f3Name.toLowerCase().includes('recovery jog')) {
                             workoutText += `- ${item.textContent ? item.textContent.trim() : ''}\n`;
                        } else {
                             workoutText += `- ${f3Name}\n`;
                        }
                    });
                }
            });
            const textToCopy = workoutText.trim();
            console.log('Attempting to copy:', textToCopy);
            try {
                await navigator.clipboard.writeText(textToCopy);
                const originalText = copyBtn.innerHTML;
                copyBtn.innerHTML = `<span class="lucide mr-2">&#xe877;</span> Copied!`;
                copyBtn.classList.add('copied-feedback');
                copyBtn.classList.remove('copy-failed-feedback');
                setTimeout(() => {
                    copyBtn.innerHTML = originalText;
                    copyBtn.classList.remove('copied-feedback');
                }, 2000);
            } catch (err) {
                console.error('Failed to copy text: ', err);
                const originalText = copyBtn.innerHTML;
                copyBtn.innerHTML = `<span class="lucide mr-2">&#xe851;</span> Failed!`;
                copyBtn.classList.add('copy-failed-feedback');
                copyBtn.classList.remove('copied-feedback');
                 setTimeout(() => {
                    copyBtn.innerHTML = originalText;
                    copyBtn.classList.remove('copy-failed-feedback');
                }, 3000);
            }
        }

        function replaceExercise(targetSpan) {
             const type = targetSpan.dataset.type;
             const currentExerciseName = targetSpan.dataset.currentExercise;
             const listItem = targetSpan.closest('li');
             if (!listItem) return;
             const list = listItem.closest('ul');
             if (!list) return;
             const currentSectionExercises = [];
             list.querySelectorAll('.clickable-exercise').forEach(span => {
                 if (span.dataset && span.dataset.currentExercise) {
                     currentSectionExercises.push(span.dataset.currentExercise);
                 }
             });
             const replacementOptions = getExercisesByType(type, 1, currentSectionExercises);
             if (replacementOptions.length > 0) {
                 const newExercise = replacementOptions[0];
                 listItem.innerHTML = `${formatExercise(newExercise)} ${getRepHint(newExercise.type)}`;
             } else {
                 console.warn(`No replacement found for ${currentExerciseName} of type ${type}`);
                 targetSpan.classList.add('no-replace-flash');
                 setTimeout(() => {
                     targetSpan.classList.remove('no-replace-flash');
                 }, 500);
             }
         }

         function hideTooltip() {
             if (currentTooltipTarget) {
                 jsTooltip.classList.add('hidden', 'opacity-0'); // Ensure hidden and opacity 0
                 currentTooltipTarget = null;
             }
         }

          function showTooltip(targetSpan) {
            const stdName = targetSpan.dataset.standardName || 'N/A';
            const tooltipText = `Standard: ${stdName} (Double-click to replace)`;
            jsTooltip.textContent = tooltipText;
            const rect = targetSpan.getBoundingClientRect();
            const estimatedTooltipWidth = tooltipText.length * 7;
            let top = rect.top + window.scrollY - 35;
            let left = rect.left + window.scrollX;
             if (left < 5) { left = 5; }
             if (left + estimatedTooltipWidth > window.innerWidth - 5) { left = window.innerWidth - estimatedTooltipWidth - 5; }
             if (top < window.scrollY + 5) { top = rect.bottom + window.scrollY + 10; }
            jsTooltip.style.top = `${top}px`;
            jsTooltip.style.left = `${left}px`;
            jsTooltip.classList.remove('hidden');
            requestAnimationFrame(() => { jsTooltip.classList.add('opacity-100'); });
            currentTooltipTarget = targetSpan;
        }

        function showLibrary() {
            const sortedExercises = [...exercises].sort((a, b) => a.f3Name.localeCompare(b.f3Name));
            libraryList.innerHTML = ''; // Clear previous
            sortedExercises.forEach(ex => {
                const li = document.createElement('li');
                li.className = 'border-b border-gray-700 pb-2';
                li.innerHTML = `
                    <strong class="text-blue-300">${ex.f3Name}</strong>:
                    <span class="text-gray-400">${ex.standardName}</span>
                `;
                libraryList.appendChild(li);
            });
            libraryModal.classList.remove('hidden');
            requestAnimationFrame(() => {
                 libraryModal.querySelector('.modal-overlay').classList.add('opacity-100');
                 libraryModal.querySelector('.modal-content').classList.add('opacity-100', 'scale-100');
                 libraryModal.querySelector('.modal-content').classList.remove('scale-95', 'opacity-0');
            });
            hideTooltip();
        }

        function hideLibrary() {
            libraryModal.querySelector('.modal-content').classList.add('scale-95', 'opacity-0');
            libraryModal.querySelector('.modal-content').classList.remove('opacity-100', 'scale-100');
            libraryModal.querySelector('.modal-overlay').classList.remove('opacity-100');
            setTimeout(() => {
                 libraryModal.classList.add('hidden');
            }, 300);
        }

        // --- Main Generation Logic (Single Definition) ---
         function generateWorkout() {
            console.log('Generating workout...');
            outputDiv.innerHTML = '';
            const warmupTime = 5; const thang1Time = 15; const thang2Time = 15; const maryTime = 7; const cotTime = 3;
            const warmupExercises = getExercisesByType('W', 3);
            const thang1Exercises = getExercisesByType('T', 4);
            const thang1Names = thang1Exercises.map(ex => ex.f3Name);
            let thang2Exercises = getExercisesByType('T', 4, thang1Names);
             if (thang2Exercises.length < 4) {
                 const needed = 4 - thang2Exercises.length;
                 const existingNames = [...thang1Names, ...thang2Exercises.map(ex => ex.f3Name)];
                 thang2Exercises.push(...getExercisesByType('T', needed, existingNames));
             }
            const maryExercises = getExercisesByType('M', 4);
            let html = '';
            const cardClasses = "bg-gray-800/80 backdrop-blur-sm p-6 rounded-lg shadow-lg border border-gray-700";
            html += `<div data-section="disclaimer" class="${cardClasses} border-l-4 border-red-500"><h2 class="text-2xl font-semibold text-red-400 mb-3 flex items-center"><span class="lucide mr-3 text-xl text-red-400">&#xe84f;</span>Disclaimer</h2><p class="text-gray-300">I am not a professional. You are participating at your own risk. Modify exercises as needed. Push yourself, but don't hurt yourself. Aye!</p><p class="text-gray-300 mt-2 font-semibold">Leave no man behind, but leave no man where you find him.</p></div>`;
            html += `<div data-section="warmup" class="${cardClasses} border-l-4 border-green-500"><h2 class="text-2xl font-semibold text-green-400 mb-3 flex items-center"><span class="lucide mr-3 text-xl text-green-400">&#xe9c0;</span>Warm-up (~${warmupTime} mins)</h2><ul class="list-disc list-inside text-gray-200 space-y-2">${warmupExercises.map(ex => `<li class="exercise-list-item px-2 py-1 rounded-md transition duration-150 ease-in-out">${formatExercise(ex)} ${getRepHint(ex.type)}</li>`).join('')}<li class="px-2 py-1">Mosey (short jog)</li></ul></div>`;
            let thang1LocationHint = " (Consider Parking Lot or Stadium Field)"; if (thang1Exercises.some(ex => ["Hills", "Stairs", "Walls", "Handrails"].some(loc => ex.locations.includes(loc)))) { thang1LocationHint = " (Consider moving to Hills/Stairs/Walls/Handrails if suitable)"; } html += `<div data-section="thang1" class="${cardClasses} border-l-4 border-yellow-500"><h2 class="text-2xl font-semibold text-yellow-400 mb-3 flex items-center"><span class="lucide mr-3 text-xl text-yellow-400">&#xeb40;</span>Thang 1 (~${thang1Time} mins) ${thang1LocationHint}</h2><p class="text-sm text-gray-400 mb-3 italic">Example structure: Circuit or AMRAP. Q determines reps/rounds.</p><ul class="list-disc list-inside text-gray-200 space-y-2">${thang1Exercises.map(ex => `<li class="exercise-list-item px-2 py-1 rounded-md transition duration-150 ease-in-out">${formatExercise(ex)} ${getRepHint(ex.type)}</li>`).join('')}<li class="px-2 py-1">Short Mosey / Recovery Jog between rounds/sets</li></ul></div>`;
            let thang2LocationHint = " (Consider Beach or different Parking Lot area)"; if (thang2Exercises.some(ex => ["Beach", "Handrails", "Hills", "Stairs", "Walls"].some(loc => ex.locations.includes(loc)))) { thang2LocationHint = " (Consider moving to Beach/Handrails/Hills/Stairs/Walls if suitable)"; } html += `<div data-section="thang2" class="${cardClasses} border-l-4 border-orange-500"><h2 class="text-2xl font-semibold text-orange-400 mb-3 flex items-center"><span class="lucide mr-3 text-xl text-orange-400">&#xea72;</span>Thang 2 (~${thang2Time} mins) ${thang2LocationHint}</h2><p class="text-sm text-gray-400 mb-3 italic">Example structure: Partner work, Tabata, or different circuit. Q determines reps/rounds.</p><ul class="list-disc list-inside text-gray-200 space-y-2">${thang2Exercises.map(ex => `<li class="exercise-list-item px-2 py-1 rounded-md transition duration-150 ease-in-out">${formatExercise(ex)} ${getRepHint(ex.type)}</li>`).join('')}<li class="px-2 py-1">Incorporate Sprints or Mosey</li></ul></div>`;
            html += `<div data-section="mary" class="${cardClasses} border-l-4 border-purple-500"><h2 class="text-2xl font-semibold text-purple-400 mb-3 flex items-center"><span class="lucide mr-3 text-xl text-purple-400">&#xea1b;</span>6 Minutes of Mary (6MOM) (~${maryTime} mins)</h2><p class="text-sm text-gray-400 mb-3 italic">Typically core focused. Q calls exercises, PAX repeats.</p><ul class="list-disc list-inside text-gray-200 space-y-2">${maryExercises.map(ex => `<li class="exercise-list-item px-2 py-1 rounded-md transition duration-150 ease-in-out">${formatExercise(ex)} ${getRepHint(ex.type)}</li>`).join('')}</ul></div>`;
            html += `<div data-section="cot" class="${cardClasses} border-l-4 border-cyan-500"><h2 class="text-2xl font-semibold text-cyan-400 mb-3 flex items-center"><span class="lucide mr-3 text-xl text-cyan-400">&#xe98a;</span>Circle of Trust (CoT) (~${cotTime}+ mins)</h2><ul class="list-disc list-inside text-gray-300 space-y-1"><li>Count-o-rama (Count PAX)</li><li>Name-o-rama (Go around: Hospital Name, F3 Name, Age)</li><li>Announcements</li><li>Ball of Man (BOM) - Intentions/Prayers</li></ul></div>`;
            outputDiv.innerHTML = html;
            copyBtn.disabled = false;
            hideTooltip();
        }


        // --- Event Listeners ---
        generateBtn.addEventListener('click', generateWorkout);
        copyBtn.addEventListener('click', copyWorkout);

        // Listener for Menu Button to show Library
        menuBtn.addEventListener('click', showLibrary);

        // Listeners for closing the Library modal
        closeLibraryBtn.addEventListener('click', hideLibrary);
        libraryOverlay.addEventListener('click', hideLibrary);


        // Delegated CLICK listener for tooltips AND hiding tooltip on outside click
        document.body.addEventListener('click', function(event) {
            const targetSpan = event.target.closest('.clickable-exercise');
            const isMenuButtonClicked = event.target.closest('#menu-btn'); // Check if menu button was clicked

            if (targetSpan) {
                // Clicked on a clickable exercise span
                event.stopPropagation(); // Prevent body click from hiding tooltip immediately

                if (targetSpan === currentTooltipTarget) {
                    // Clicked the same element again, hide tooltip
                    hideTooltip();
                } else {
                    // Clicked a new element, show tooltip
                    showTooltip(targetSpan);
                }
            } else if (!isMenuButtonClicked && !event.target.closest('.modal-content')) {
                 // Clicked outside any clickable exercise span AND not the menu button AND not inside modal content
                hideTooltip();
            }
        });


        // Delegated DOUBLE-CLICK listener for replacing exercises
        outputDiv.addEventListener('dblclick', function(event) {
            const targetSpan = event.target.closest('.clickable-exercise');
            if (targetSpan) {
                hideTooltip(); // Hide tooltip before replacing
                replaceExercise(targetSpan);
            }
        });

    </script>

</body>
</html>

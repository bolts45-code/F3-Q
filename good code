<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>F3 "Q" Workout Planner</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
      /* Load Lucide Icons font */
      @font-face {
        font-family: 'LucideIcons';
        src: url(https://cdn.jsdelivr.net/npm/lucide-static@latest/font/lucide.ttf) format('truetype');
      }
      /* Base style for Lucide Icons */
      .lucide {
        font-family: 'LucideIcons';
        font-style: normal;
        font-weight: normal;
        line-height: 1;
        letter-spacing: normal;
        text-transform: none;
        display: inline-block;
        white-space: nowrap;
        word-wrap: normal;
        direction: ltr;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        text-rendering: optimizeLegibility;
        font-feature-settings: "liga";
      }
      /* Style for JS-controlled tooltip */
      #js-tooltip {
        position: absolute;
        background-color: #1f2937; /* gray-800 */
        color: #e5e7eb; /* gray-200 */
        border: 1px solid #374151; /* gray-700 */
        padding: 6px 12px;
        border-radius: 6px;
        font-size: 0.85em;
        white-space: nowrap;
        z-index: 50;
        pointer-events: none; /* Tooltip shouldn't interfere with clicks */
        transition: opacity 0.2s;
      }
      /* Style for copy button feedback */
      .copied-feedback {
          background-image: linear-gradient(to right, #10b981, #22c55e) !important; /* Green gradient */
      }
      .copy-failed-feedback {
          background-image: linear-gradient(to right, #ef4444, #dc2626) !important; /* Red gradient */
      }
      /* Style for clickable exercises (for tooltip and replacement) */
      .clickable-exercise {
          cursor: pointer;
          border-bottom: 1px dashed rgba(96, 165, 250, 0.5); /* Dashed blue underline */
          padding-bottom: 1px;
          transition: border-color 0.2s ease-in-out;
      }
       .clickable-exercise:hover {
           border-bottom-color: rgba(96, 165, 250, 1); /* Solid blue on hover */
       }
      /* Style for the replace icon within clickable exercises */
      .clickable-exercise .lucide {
          opacity: 0;
          transition: opacity 0.2s ease-in-out;
          font-size: 0.9em;
          vertical-align: middle;
          margin-left: 4px;
      }
      .clickable-exercise:hover .lucide {
          opacity: 0.8; /* Show icon on hover */
      }
      /* Style for no replacement feedback (flash red) */
      .no-replace-flash {
          transition: background-color 0.1s ease-in-out;
          background-color: rgba(239, 68, 68, 0.3) !important; /* Light red flash */
          border-radius: 4px;
      }
      /* Style for hover on list items containing exercises */
      .exercise-list-item:hover {
        background-color: rgba(55, 65, 81, 0.3); /* Subtle gray background on hover */
      }
      /* Modal transition styles */
      .modal-overlay {
          transition: opacity 0.3s ease-in-out;
      }
      .modal-content {
          transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;
      }
      /* Custom radio button style */
      input[type="radio"]:checked + label {
        border-color: #60a5fa; /* blue-400 */
        background-color: rgba(96, 165, 250, 0.2);
      }
      /* Styling for Reps/Time button and input */
      .rep-time-controls {
        display: inline-flex; /* Changed from inline-block for better alignment */
        align-items: center;
        margin-left: 0.75rem; /* ml-3 */
      }
      .rep-time-btn {
        padding: 0.125rem 0.5rem; /* py-0.5 px-2 */
        font-size: 0.75rem; /* text-xs */
        border-radius: 0.375rem; /* rounded-md */
        background-color: #4b5563; /* bg-gray-600 */
        color: #e5e7eb; /* text-gray-200 */
        transition: background-color 0.15s ease-in-out;
        white-space: nowrap; /* Prevent wrapping */
      }
      .rep-time-btn:hover {
        background-color: #6b7280; /* hover:bg-gray-500 */
      }
      .rep-time-input {
        margin-left: 0.25rem; /* ml-1 */
        padding: 0.125rem 0.25rem; /* py-0.5 px-1 */
        font-size: 0.75rem; /* text-xs */
        border-radius: 0.375rem; /* rounded-md */
        background-color: #374151; /* bg-gray-700 */
        border: 1px solid #4b5563; /* border border-gray-600 */
        width: 5rem; /* w-20 */
        color: #e5e7eb; /* text-gray-200 */
      }
      .rep-time-input::placeholder {
          color: #9ca3af; /* placeholder-gray-400 */
      }
      /* Ensure list items can accommodate the controls */
      .exercise-list-item {
          display: flex;
          justify-content: space-between; /* Pushes controls to the right */
          align-items: center;
          flex-wrap: wrap; /* Allow wrapping on small screens */
      }
       .exercise-list-item > span:first-of-type { /* Target the exercise name span */
           margin-right: auto; /* Keep name pushed left */
           padding-right: 8px; /* Add some space */
       }


    </style>
    <script>
      // Configure Tailwind CSS theme extensions
      tailwind.config = {
        theme: {
          extend: {
            fontFamily: {
              sans: ['Inter', 'sans-serif'], // Set Inter as the default sans-serif font
            },
          }
        }
      }
    </script>
</head>
<body class="bg-gradient-to-b from-gray-900 to-gray-800 text-gray-200 font-sans p-4 md:p-8 min-h-screen">

    <div id="js-tooltip" class="hidden opacity-0">Tooltip text</div>

    <div class="max-w-3xl mx-auto relative">
        <header class="text-center mb-10">
            <button id="menu-btn" aria-label="Open Exercise Library" class="absolute top-0 right-0 mt-1 mr-1 p-2 text-gray-400 hover:text-blue-400 transition duration-150 ease-in-out z-10">
                <span class="lucide text-2xl">&#xe953;</span> </button>

            <h1 class="text-4xl md:text-5xl font-bold text-blue-400 mb-2">F3 "Q" Workout Planner</h1>
            <p class="text-lg text-gray-400 italic mt-1 mb-3">Fitness, Fellowship, and Faith</p>
            <p class="text-gray-300 text-lg">Generate a workout structure. Click exercises for info, double-click to replace!</p>
            <p class="text-sm text-gray-500 mt-2">Location Hints: Stadium, Hills, Beach, Parking Lot, Stairs, Walls, Handrails</p>
        </header>

        <div class="text-center mb-6">
            <span class="text-lg text-gray-300 mr-4 font-semibold">Workout Duration:</span>
            <div class="inline-flex rounded-md shadow-sm" role="group">
                <input type="radio" id="duration-45" name="duration" value="45" class="hidden peer" checked>
                <label for="duration-45" class="px-4 py-2 text-sm font-medium text-gray-200 bg-gray-700 border border-gray-600 rounded-l-lg cursor-pointer peer-checked:bg-blue-600 peer-checked:border-blue-500 hover:bg-gray-600 hover:text-white transition duration-150 ease-in-out">
                    45 Min
                </label>
                <input type="radio" id="duration-60" name="duration" value="60" class="hidden peer">
                <label for="duration-60" class="px-4 py-2 text-sm font-medium text-gray-200 bg-gray-700 border border-gray-600 rounded-r-lg cursor-pointer peer-checked:bg-blue-600 peer-checked:border-blue-500 hover:bg-gray-600 hover:text-white transition duration-150 ease-in-out">
                    60 Min
                </label>
            </div>
        </div>


        <div class="text-center mb-10 space-x-4">
            <button id="generate-btn" class="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-bold py-3 px-8 rounded-lg shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition duration-200 ease-in-out inline-flex items-center">
                <span class="lucide mr-2 text-lg">&#xea4c;</span> Generate Workout </button>
            <button id="copy-btn" class="bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800 text-white font-bold py-3 px-8 rounded-lg shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition duration-200 ease-in-out inline-flex items-center disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                <span class="lucide mr-2 text-lg">&#xe913;</span> Copy Workout </button>
        </div>

        <div id="workout-output" class="space-y-8">
            <div class="bg-gray-800/80 backdrop-blur-sm p-6 rounded-lg shadow-lg border border-gray-700">
                <h2 class="text-2xl font-semibold text-blue-300 mb-3 border-b border-gray-600 pb-2 flex items-center"><span class="lucide mr-3 text-xl text-blue-300">&#xe8e5;</span>Workout Plan</h2> <p class="text-gray-300 italic">Select a duration and click the "Generate Workout" button above to create a plan. Remember to adjust reps and timing as needed!</p>
            </div>
        </div>
    </div>

    <div id="library-modal" class="hidden fixed inset-0 z-50 overflow-y-auto" aria-labelledby="library-title" role="dialog" aria-modal="true">
        <div class="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div id="library-overlay" class="fixed inset-0 bg-gray-900 bg-opacity-75 modal-overlay opacity-0" aria-hidden="true"></div>

            <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>

            <div class="modal-content inline-block align-bottom bg-gray-800 rounded-lg text-left overflow-hidden shadow-xl transform sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full scale-95 opacity-0">
                <div class="bg-gray-800 px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                    <div class="sm:flex sm:items-start">
                        <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                            <h3 class="text-2xl leading-6 font-bold text-blue-400 mb-4 flex items-center" id="library-title">
                                <span class="lucide mr-3 text-xl text-blue-400">&#xe8b6;</span> Exercise Library (Exicon)
                            </h3>
                            <div class="mt-2 max-h-[60vh] overflow-y-auto pr-2">
                                <ul id="library-list" class="space-y-3 text-gray-300">
                                    <li>Loading...</li> </ul>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-800 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse border-t border-gray-700">
                    <button type="button" id="close-library-btn" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-600 shadow-sm px-4 py-2 bg-gray-700 text-base font-medium text-gray-200 hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-blue-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm transition duration-150 ease-in-out">
                        Close
                    </button>
                </div>
            </div>
        </div>
    </div>


    <script>
        // --- F3 Exercise Data (Single Definition) ---
        // Array containing all exercise objects with their F3 name, standard name, type, and suitable locations.
        const exercises = [
             // Warm-up (Type: W) - Typically dynamic stretches and light cardio
            { f3Name: "SSH", standardName: "Side Straddle Hop / Jumping Jack", type: "W", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Imperial Walker", standardName: "Imperial Walker (Alt. Elbow to Knee)", type: "W", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Hillbilly Walker", standardName: "Walking Calf Raises", type: "W", locations: ["Parking Lot", "Stadium", "Beach", "Hills"] },
            { f3Name: "High Knees", standardName: "High Knees", type: "W", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Butt Kicker", standardName: "Butt Kicker", type: "W", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Overhead Clap", standardName: "Overhead Arm Claps", type: "W", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Seal Clap", standardName: "Seal Claps (Front Arm Claps)", type: "W", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Sun Gods", standardName: "Arm Circles (Forward/Backward)", type: "W", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Michael Phelps", standardName: "Wide Arm Swings", type: "W", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Good Morning", standardName: "Good Morning (Hamstring Stretch)", type: "W", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Windmill", standardName: "Windmill Stretch", type: "W", locations: ["Parking Lot", "Stadium", "Beach"] },
            // Thang Exercises (Type: T) - Main workout components, strength and conditioning
            { f3Name: "Merkin", standardName: "Push-up", type: "T", locations: ["Parking Lot", "Stadium", "Beach", "Stairs", "Walls"] },
            { f3Name: "Diamond Merkin", standardName: "Diamond Push-up", type: "T", locations: ["Parking Lot", "Stadium", "Beach", "Stairs", "Walls"] },
            { f3Name: "Wide Merkin", standardName: "Wide Push-up", type: "T", locations: ["Parking Lot", "Stadium", "Beach", "Stairs", "Walls"] },
            { f3Name: "Staggered Merkin", standardName: "Staggered Hand Push-up", type: "T", locations: ["Parking Lot", "Stadium", "Beach", "Stairs", "Walls"] },
            { f3Name: "Incline Merkin", standardName: "Incline Push-up", type: "T", locations: ["Stairs", "Walls", "Handrails"] },
            { f3Name: "Decline Merkin", standardName: "Decline Push-up", type: "T", locations: ["Stairs", "Walls"] },
            { f3Name: "Hand Release Merkin", standardName: "Hand Release Push-up", type: "T", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Squat", standardName: "Air Squat", type: "T", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Jump Squat", standardName: "Jump Squat", type: "T", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Sumo Squat", standardName: "Sumo Squat", type: "T", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Pistol Squat", standardName: "Single Leg Squat (Assisted/Unassisted)", type: "T", locations: ["Parking Lot", "Stadium", "Beach", "Walls"] },
            { f3Name: "Monkey Humper", standardName: "Air Squat variation (w/ hip thrust)", type: "T", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Lunge", standardName: "Lunge", type: "T", locations: ["Parking Lot", "Stadium", "Beach", "Hills"] },
            { f3Name: "Reverse Lunge", standardName: "Reverse Lunge", type: "T", locations: ["Parking Lot", "Stadium", "Beach", "Hills"] },
            { f3Name: "Split Jack", standardName: "Lunge Jumps", type: "T", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Bonnie Blairs", standardName: "Skater Jumps", type: "T", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Burpee", standardName: "Burpee", type: "T", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Eight-count Body Builder", standardName: "8-Count Burpee", type: "T", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Man Maker", standardName: "Man Maker (Burpee variation w/ weights)", type: "T", locations: ["Parking Lot"] }, // Requires weights, often in parking lot
            { f3Name: "Bear Crawl", standardName: "Bear Crawl", type: "T", locations: ["Parking Lot", "Stadium", "Beach", "Hills"] },
            { f3Name: "Crab Walk", standardName: "Crab Walk", type: "T", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Sprint", standardName: "Sprint", type: "T", locations: ["Parking Lot", "Stadium", "Beach", "Hills"] },
            { f3Name: "Bernie Sanders", standardName: "Backwards Run", type: "T", locations: ["Parking Lot", "Stadium", "Beach", "Hills"] },
            { f3Name: "Hill Sprint", standardName: "Hill Sprint", type: "T", locations: ["Hills"] },
            { f3Name: "Stair Climb / Run", standardName: "Stair Climb / Run", type: "T", locations: ["Stairs", "Stadium"] },
            { f3Name: "Step Up", standardName: "Step Up", type: "T", locations: ["Stairs", "Walls"] },
            { f3Name: "Box Jump / Ledge Jump", standardName: "Box Jump / Ledge Jump", type: "T", locations: ["Stairs", "Walls"] },
            { f3Name: "Dips", standardName: "Tricep Dips", type: "T", locations: ["Stairs", "Handrails", "Walls"] },
            { f3Name: "People's Chair", standardName: "Wall Sit", type: "T", locations: ["Walls", "Stadium"] },
            { f3Name: "Balls to the Wall", standardName: "Handstand Hold (against wall)", type: "T", locations: ["Walls"] },
            { f3Name: "Australian Pull-up", standardName: "Inverted Row / Aussie Pull-up", type: "T", locations: ["Handrails", "Stadium"] },
            { f3Name: "Dirty Hookup", standardName: "Burpee + Pull-up (if bar avail)", type: "T", locations: ["Handrails", "Stadium"] }, // Requires pull-up bar
            // Mary Exercises (Type: M) - Typically core-focused exercises done at the end
            { f3Name: "LBC", standardName: "Little Baby Crunch", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "American Hammer", standardName: "Russian Twist variation", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Freddie Mercury", standardName: "Flutter Kicks variation", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Box Cutter", standardName: "Reverse Crunch variation", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Dolly", standardName: "Leg Hold (6 inches)", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Hello Dolly", standardName: "Leg Spreaders (from Dolly)", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Rosalita", standardName: "Leg Lifts (from Dolly)", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Flutter Kicks", standardName: "Flutter Kicks", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Plank", standardName: "Plank Hold", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Plank Jack", standardName: "Plank Jack", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Side Plank", standardName: "Side Plank Hold (L/R)", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Superman", standardName: "Superman Hold", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Pickle Pounder", standardName: "Heel Taps (lying down)", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Gas Pumper", standardName: "Legs bent, push feet to sky", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Crunchy Frog", standardName: "Crunchy Frog (Tuck Crunch)", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
            { f3Name: "Low Slow Flutter", standardName: "Slow Flutter Kicks (near ground)", type: "M", locations: ["Parking Lot", "Stadium", "Beach"] },
        ];

        // --- DOM Elements ---
        // Get references to frequently used elements for performance.
        const generateBtn = document.getElementById('generate-btn');
        const copyBtn = document.getElementById('copy-btn');
        const outputDiv = document.getElementById('workout-output');
        const jsTooltip = document.getElementById('js-tooltip');
        const menuBtn = document.getElementById('menu-btn');
        const libraryModal = document.getElementById('library-modal');
        const libraryOverlay = document.getElementById('library-overlay');
        const closeLibraryBtn = document.getElementById('close-library-btn');
        const libraryList = document.getElementById('library-list');

        // --- Global State ---
        let currentTooltipTarget = null; // Track which element the tooltip is currently for

        // --- Helper Functions (Single Definitions) ---

        /**
         * Shuffles an array in place using the Fisher-Yates algorithm.
         * @param {Array} array The array to shuffle.
         * @returns {Array} The shuffled array.
         */
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]]; // Swap elements
            }
            return array;
        }

        /**
         * Gets a specified number of unique exercises of a given type, excluding specified names.
         * @param {string} type The type of exercise ('W', 'T', 'M').
         * @param {number} count The number of exercises to retrieve.
         * @param {string[]} [excludeNames=[]] An array of F3 names to exclude.
         * @returns {Array} An array of exercise objects.
         */
        function getExercisesByType(type, count, excludeNames = []) {
            const availableExercises = exercises.filter(ex =>
                ex.type === type && !excludeNames.includes(ex.f3Name) // Filter by type and exclude list
            );
            // Shuffle the available exercises and take the required count
            return shuffleArray([...availableExercises]).slice(0, count);
        }

        /**
         * Returns an HTML string with a rep/time hint based on exercise type.
         * @param {string} type The type of exercise ('W', 'T', 'M').
         * @returns {string} HTML string for the hint. REMOVED hint for T type as it's replaced by button.
         */
        function getRepHint(type) {
            if (type === 'W') return '<span class="text-xs text-gray-400 ml-1">(~15-20 IC)</span>'; // IC = In Cadence
            if (type === 'M') return '<span class="text-xs text-gray-400 ml-1">(~1 min or count)</span>'; // Keep hint for Mary for now
            // if (type === 'T') return '<span class="text-xs text-gray-400 ml-1">(Q Choice: Reps/Time)</span>'; // Q = Leader - REMOVED
            return ''; // No hint for other types
        }

        /**
         * Formats an exercise object into an HTML span for display, making it clickable.
         * @param {object} exercise The exercise object.
         * @returns {string} HTML string for the clickable exercise span.
         */
        function formatExercise(exercise) {
            // Added refresh icon unicode &#xea4c;
            return `<span class="clickable-exercise inline-flex items-center group"
                          data-type="${exercise.type}"
                          data-current-exercise="${exercise.f3Name}"
                          data-standard-name="${exercise.standardName}">
                        ${exercise.f3Name}
                        <span class="lucide ml-1 opacity-0 group-hover:opacity-80 transition-opacity text-blue-400">&#xea4c;</span>
                    </span>`;
        }

        /**
         * Creates the HTML for the interactive Reps/Time controls.
         * @returns {string} HTML string for the button and input field.
         */
        function createRepTimeControls() {
            return `<span class="rep-time-controls">
                      <button class="rep-time-btn" data-mode="default">Reps/Time</button>
                      <input type="text" class="rep-time-input" placeholder="e.g., 15">
                    </span>`;
        }


        /**
         * Copies the generated workout plan to the clipboard as plain text.
         * Provides visual feedback on success or failure.
         * MODIFIED: Now explicitly gets exercise name from data attribute to avoid copying button/input text.
         */
        async function copyWorkout() {
            let workoutText = "";
            // Iterate through each section div in the output
            outputDiv.querySelectorAll('div[data-section]').forEach(section => {
                const titleElement = section.querySelector('h2');
                const listElement = section.querySelector('ul');
                const paraElements = section.querySelectorAll('p'); // Get all paragraphs

                // Add section title
                if (titleElement) {
                    // Extract title text, removing time and location hints for cleaner copy
                    const titleText = titleElement.textContent ? titleElement.textContent.replace(/\(\~?\d+\+? mins\)/, '').replace(/ \(.*\)/, '').trim() : '';
                    workoutText += `\n--- ${titleText} ---\n`;
                }

                // Add specific paragraphs (italic ones or disclaimer)
                paraElements.forEach(para => {
                    if (para.classList.contains('italic') || section.dataset.section === 'disclaimer') {
                        workoutText += `${para.innerText.trim()}\n`;
                    }
                });

                // Add list items
                if (listElement) {
                    listElement.querySelectorAll('li').forEach(item => {
                        const clickableSpan = item.querySelector('.clickable-exercise');
                        let exerciseName = '';

                        // If it's a clickable exercise, use the data attribute for the accurate name
                        if (clickableSpan && clickableSpan.dataset.currentExercise) {
                            exerciseName = clickableSpan.dataset.currentExercise;
                            workoutText += `- ${exerciseName}\n`; // Just the exercise name
                        } else {
                            // Handle non-exercise items like Mosey, Sprint, CoT points
                             const itemText = item.textContent ? item.textContent.trim() : '';
                             // Basic check to avoid copying button/input text accidentally if structure changes
                             if (!item.querySelector('.rep-time-btn')) {
                                 workoutText += `- ${itemText}\n`;
                             }
                        }
                    });
                }
            });

            const textToCopy = workoutText.trim();
            console.log('Attempting to copy:', textToCopy); // Log for debugging

            try {
                // Use the Clipboard API to write text
                await navigator.clipboard.writeText(textToCopy);

                // --- Success Feedback ---
                const originalHTML = copyBtn.innerHTML; // Store original HTML
                copyBtn.innerHTML = `<span class="lucide mr-2">&#xe877;</span> Copied!`; // check icon
                copyBtn.classList.add('copied-feedback');
                copyBtn.classList.remove('copy-failed-feedback'); // Remove potential previous fail style

                // Reset button after 2 seconds
                setTimeout(() => {
                    copyBtn.innerHTML = originalHTML; // Restore original HTML
                    copyBtn.classList.remove('copied-feedback');
                }, 2000);

            } catch (err) {
                // --- Failure Feedback ---
                console.error('Failed to copy text: ', err); // Log error
                const originalHTML = copyBtn.innerHTML; // Store original HTML
                copyBtn.innerHTML = `<span class="lucide mr-2">&#xe851;</span> Failed!`; // alert-triangle icon
                copyBtn.classList.add('copy-failed-feedback');
                copyBtn.classList.remove('copied-feedback'); // Remove potential previous success style

                // Reset button after 3 seconds
                 setTimeout(() => {
                    copyBtn.innerHTML = originalHTML; // Restore original HTML
                    copyBtn.classList.remove('copy-failed-feedback');
                }, 3000);
            }
        }

        /**
         * Replaces the clicked exercise with another random one of the same type,
         * ensuring it's not already present in the current section.
         * MODIFIED: Resets the Reps/Time controls for the replaced exercise.
         * @param {HTMLElement} targetSpan The clicked exercise span element.
         */
         function replaceExercise(targetSpan) {
             const type = targetSpan.dataset.type;
             const currentExerciseName = targetSpan.dataset.currentExercise;
             const listItem = targetSpan.closest('li'); // Find the parent list item
             if (!listItem) return; // Should always find one, but safety check

             const list = listItem.closest('ul'); // Find the parent list
             if (!list) return; // Safety check

             // Get all exercises currently in this specific list section
             const currentSectionExercises = [];
             list.querySelectorAll('.clickable-exercise').forEach(span => {
                 // Exclude the one being replaced from the check
                 if (span !== targetSpan && span.dataset && span.dataset.currentExercise) {
                     currentSectionExercises.push(span.dataset.currentExercise);
                 }
             });

             // Get one replacement exercise of the same type, excluding all others currently in the section
             const replacementOptions = getExercisesByType(type, 1, currentSectionExercises);

             if (replacementOptions.length > 0) {
                 // If a replacement is found, update the list item's HTML
                 const newExercise = replacementOptions[0];
                 // Construct the new list item content, including controls if applicable
                 let newItemHTML = `<span>${formatExercise(newExercise)} ${getRepHint(newExercise.type)}</span>`;
                 if (newExercise.type === 'T' || newExercise.type === 'M') {
                     newItemHTML += createRepTimeControls();
                 }
                 listItem.innerHTML = newItemHTML;

             } else {
                 // If no replacement found (e.g., all exercises of that type are used)
                 console.warn(`No replacement found for ${currentExerciseName} of type ${type}`);
                 // Flash the element briefly to indicate no replacement available
                 targetSpan.classList.add('no-replace-flash');
                 setTimeout(() => {
                     targetSpan.classList.remove('no-replace-flash');
                 }, 500); // Remove flash after 0.5 seconds
             }
         }

        /**
         * Hides the custom tooltip.
         */
        function hideTooltip() {
            if (currentTooltipTarget) {
                jsTooltip.classList.add('hidden', 'opacity-0'); // Ensure hidden and opacity 0
                jsTooltip.classList.remove('opacity-100'); // Remove opacity for transition
                currentTooltipTarget = null; // Clear the target
            }
        }

       /**
        * Shows the custom tooltip near the target element.
        * @param {HTMLElement} targetSpan The element to position the tooltip near.
        */
        function showTooltip(targetSpan) {
            const stdName = targetSpan.dataset.standardName || 'N/A'; // Get standard name from data attribute
            const tooltipText = `Standard: ${stdName} (Double-click to replace)`;
            jsTooltip.textContent = tooltipText;

            const rect = targetSpan.getBoundingClientRect(); // Get position of the target span
            const tooltipRect = jsTooltip.getBoundingClientRect(); // Get tooltip dimensions for better positioning
            const tooltipWidth = tooltipRect.width || (tooltipText.length * 7); // Use actual width or estimate

            // Calculate initial position (above the element)
            let top = rect.top + window.scrollY - jsTooltip.offsetHeight - 5; // Position above with 5px margin
            let left = rect.left + window.scrollX + (rect.width / 2) - (tooltipWidth / 2); // Center horizontally

            // Adjust position to stay within viewport boundaries
            if (left < 5) { left = 5; } // Prevent going off left edge
            if (left + tooltipWidth > window.innerWidth - 5) { // Prevent going off right edge
                left = window.innerWidth - tooltipWidth - 5;
            }
            if (top < window.scrollY + 5) { // Prevent going off top edge (or under fixed header)
                top = rect.bottom + window.scrollY + 10; // Move below element instead
            }

            // Apply position and make visible with transition
            jsTooltip.style.top = `${top}px`;
            jsTooltip.style.left = `${left}px`;
            jsTooltip.classList.remove('hidden');
            // Use requestAnimationFrame to ensure the 'hidden' class is removed before adding opacity
            requestAnimationFrame(() => { jsTooltip.classList.add('opacity-100'); });
            currentTooltipTarget = targetSpan; // Set the current target
        }

        /**
         * Populates and shows the Exercise Library modal.
         */
        function showLibrary() {
            // Sort exercises alphabetically by F3 Name for the library
            const sortedExercises = [...exercises].sort((a, b) => a.f3Name.localeCompare(b.f3Name));
            libraryList.innerHTML = ''; // Clear previous list items

            // Create and append list items for each exercise
            sortedExercises.forEach(ex => {
                const li = document.createElement('li');
                li.className = 'border-b border-gray-700 pb-2'; // Styling for each item
                li.innerHTML = `
                    <strong class="text-blue-300">${ex.f3Name}</strong>:
                    <span class="text-gray-400">${ex.standardName}</span>
                    `;
                libraryList.appendChild(li);
            });

            // Show the modal with transitions
            libraryModal.classList.remove('hidden');
            requestAnimationFrame(() => { // Use rAF for smooth transition start
                 libraryModal.querySelector('.modal-overlay').classList.add('opacity-100');
                 const modalContent = libraryModal.querySelector('.modal-content');
                 modalContent.classList.add('opacity-100', 'scale-100');
                 modalContent.classList.remove('scale-95', 'opacity-0');
            });
            hideTooltip(); // Hide any active tooltip when opening the library
        }

        /**
         * Hides the Exercise Library modal with transitions.
         */
        function hideLibrary() {
            // Apply exit transitions
            const modalContent = libraryModal.querySelector('.modal-content');
            modalContent.classList.add('scale-95', 'opacity-0');
            modalContent.classList.remove('opacity-100', 'scale-100');
            libraryModal.querySelector('.modal-overlay').classList.remove('opacity-100');

            // Wait for transitions to finish before setting display: none
            setTimeout(() => {
                libraryModal.classList.add('hidden');
            }, 300); // Corresponds to the transition duration (0.3s)
        }

        // --- Main Generation Logic (Single Definition) ---
        /**
         * Generates the full workout structure based on selected duration
         * and displays it in the output div.
         * MODIFIED: Adds Reps/Time controls to T and M exercises.
         */
         function generateWorkout() {
             console.log('Generating workout...'); // Log start
             outputDiv.innerHTML = ''; // Clear previous workout

             // --- Get Selected Duration ---
             const selectedDuration = parseInt(document.querySelector('input[name="duration"]:checked').value, 10);
             console.log(`Selected duration: ${selectedDuration} minutes`);

             // --- Define Time Allocations and Exercise Counts based on Duration ---
             let warmupTime, thang1Time, thang2Time, maryTime, cotTime;
             let warmupCount, thang1Count, thang2Count, maryCount;

             const baseWarmupTime = 5;
             const baseMaryTime = 7; // Includes buffer for transitions/explanation
             const baseCotTime = 3; // Minimum time

             if (selectedDuration === 60) {
                 // 60 Minute Workout
                 warmupTime = baseWarmupTime; // 5
                 thang1Time = 22; // Increased
                 thang2Time = 23; // Increased
                 maryTime = baseMaryTime; // 7
                 cotTime = baseCotTime; // 3
                 warmupCount = 3;
                 thang1Count = 5; // Increased
                 thang2Count = 5; // Increased
                 maryCount = 5; // Increased
             } else {
                 // 45 Minute Workout (Default)
                 warmupTime = baseWarmupTime; // 5
                 thang1Time = 15;
                 thang2Time = 15;
                 maryTime = baseMaryTime; // 7
                 cotTime = baseCotTime; // 3
                 warmupCount = 3;
                 thang1Count = 4;
                 thang2Count = 4;
                 maryCount = 4;
             }

             // --- Get Exercises for Each Section ---
             const warmupExercises = getExercisesByType('W', warmupCount);
             const thang1Exercises = getExercisesByType('T', thang1Count);
             const thang1Names = thang1Exercises.map(ex => ex.f3Name);
             let thang2Exercises = getExercisesByType('T', thang2Count, thang1Names);
             if (thang2Exercises.length < thang2Count) {
                 console.warn(`Not enough unique 'T' exercises for Thang 2 (needed ${thang2Count}, found ${thang2Exercises.length}), allowing repeats.`);
                 const needed = thang2Count - thang2Exercises.length;
                 thang2Exercises.push(...getExercisesByType('T', needed, thang2Exercises.map(ex => ex.f3Name)));
             }
             const maryExercises = getExercisesByType('M', maryCount);

             // --- Build HTML String ---
             let html = '';
             const cardClasses = "bg-gray-800/80 backdrop-blur-sm p-6 rounded-lg shadow-lg border border-gray-700";

             // Disclaimer Section
             html += `<div data-section="disclaimer" class="${cardClasses} border-l-4 border-red-500">
                        <h2 class="text-2xl font-semibold text-red-400 mb-3 flex items-center"><span class="lucide mr-3 text-xl text-red-400">&#xe84f;</span>Disclaimer</h2>
                        <p class="text-gray-300">I am not a professional. You are participating at your own risk. Modify exercises as needed. Push yourself, but don't hurt yourself. Aye!</p>
                        <p class="text-gray-300 mt-2 font-semibold">Leave no man behind, but leave no man where you find him.</p>
                      </div>`;

             // Warm-up Section
             html += `<div data-section="warmup" class="${cardClasses} border-l-4 border-green-500">
                        <h2 class="text-2xl font-semibold text-green-400 mb-3 flex items-center"><span class="lucide mr-3 text-xl text-green-400">&#xe9c0;</span>Warm-up (~${warmupTime} mins)</h2>
                        <ul class="list-disc list-inside text-gray-200 space-y-2">
                            ${warmupExercises.map(ex => `<li class="exercise-list-item px-2 py-1 rounded-md transition duration-150 ease-in-out"><span>${formatExercise(ex)} ${getRepHint(ex.type)}</span></li>`).join('')}
                            <li class="px-2 py-1"><span>Mosey (short jog)</span></li>
                        </ul>
                      </div>`;

             // Thang 1 Section
             let thang1LocationHint = " (Consider Parking Lot or Stadium Field)";
             if (thang1Exercises.some(ex => ["Hills", "Stairs", "Walls", "Handrails"].some(loc => ex.locations.includes(loc)))) {
                 thang1LocationHint = " (Consider moving to Hills/Stairs/Walls/Handrails if suitable)";
             }
             html += `<div data-section="thang1" class="${cardClasses} border-l-4 border-yellow-500">
                        <h2 class="text-2xl font-semibold text-yellow-400 mb-3 flex items-center"><span class="lucide mr-3 text-xl text-yellow-400">&#xeb40;</span>Thang 1 (~${thang1Time} mins) ${thang1LocationHint}</h2>
                        <p class="text-sm text-gray-400 mb-3 italic">Example structure: Circuit or AMRAP. Q determines reps/rounds.</p>
                        <ul class="list-disc list-inside text-gray-200 space-y-2">
                            ${thang1Exercises.map(ex => `<li class="exercise-list-item px-2 py-1 rounded-md transition duration-150 ease-in-out"><span>${formatExercise(ex)}</span> ${createRepTimeControls()}</li>`).join('')}
                            <li class="px-2 py-1"><span>Short Mosey / Recovery Jog between rounds/sets</span></li>
                        </ul>
                      </div>`;

            // Thang 2 Section
             let thang2LocationHint = " (Consider Beach or different Parking Lot area)";
             if (thang2Exercises.some(ex => ["Beach", "Handrails", "Hills", "Stairs", "Walls"].some(loc => ex.locations.includes(loc)))) {
                 thang2LocationHint = " (Consider moving to Beach/Handrails/Hills/Stairs/Walls if suitable)";
             }
             html += `<div data-section="thang2" class="${cardClasses} border-l-4 border-orange-500">
                        <h2 class="text-2xl font-semibold text-orange-400 mb-3 flex items-center"><span class="lucide mr-3 text-xl text-orange-400">&#xea72;</span>Thang 2 (~${thang2Time} mins) ${thang2LocationHint}</h2>
                        <p class="text-sm text-gray-400 mb-3 italic">Example structure: Partner work, Tabata, or different circuit. Q determines reps/rounds.</p>
                        <ul class="list-disc list-inside text-gray-200 space-y-2">
                            ${thang2Exercises.map(ex => `<li class="exercise-list-item px-2 py-1 rounded-md transition duration-150 ease-in-out"><span>${formatExercise(ex)}</span> ${createRepTimeControls()}</li>`).join('')}
                            <li class="px-2 py-1"><span>Incorporate Sprints or Mosey</span></li>
                        </ul>
                      </div>`;

             // Mary Section
             html += `<div data-section="mary" class="${cardClasses} border-l-4 border-purple-500">
                        <h2 class="text-2xl font-semibold text-purple-400 mb-3 flex items-center"><span class="lucide mr-3 text-xl text-purple-400">&#xea1b;</span>Mary (~${maryTime} mins)</h2>
                        <p class="text-sm text-gray-400 mb-3 italic">Typically core focused. Q calls exercises, PAX repeats.</p>
                        <ul class="list-disc list-inside text-gray-200 space-y-2">
                            ${maryExercises.map(ex => `<li class="exercise-list-item px-2 py-1 rounded-md transition duration-150 ease-in-out"><span>${formatExercise(ex)} ${getRepHint(ex.type)}</span> ${createRepTimeControls()}</li>`).join('')}
                        </ul>
                      </div>`;

             // CoT Section
             html += `<div data-section="cot" class="${cardClasses} border-l-4 border-cyan-500">
                        <h2 class="text-2xl font-semibold text-cyan-400 mb-3 flex items-center"><span class="lucide mr-3 text-xl text-cyan-400">&#xe98a;</span>Circle of Trust (CoT) (~${cotTime}+ mins)</h2>
                        <ul class="list-disc list-inside text-gray-300 space-y-1">
                            <li><span>Count-o-rama (Count PAX)</span></li>
                            <li><span>Name-o-rama (Go around: Hospital Name, F3 Name, Age)</span></li>
                            <li><span>Announcements</span></li>
                            <li><span>Ball of Man (BOM) - Intentions/Prayers</span></li>
                        </ul>
                      </div>`;

             // Set the generated HTML to the output div
             outputDiv.innerHTML = html;
             copyBtn.disabled = false; // Enable the copy button
             hideTooltip(); // Ensure any lingering tooltip is hidden
         }


        // --- Event Listeners ---

        // Generate workout when the button is clicked
        generateBtn.addEventListener('click', generateWorkout);

        // Copy workout when the button is clicked
        copyBtn.addEventListener('click', copyWorkout);

        // Listener for Menu Button to show Library
        menuBtn.addEventListener('click', showLibrary);

        // Listeners for closing the Library modal
        closeLibraryBtn.addEventListener('click', hideLibrary);
        libraryOverlay.addEventListener('click', hideLibrary); // Close if clicking outside the modal content

        // --- Delegated Event Listeners for Dynamic Content ---

        // Using event delegation on the body for clicks, tooltips, double-clicks, and rep/time buttons
        document.body.addEventListener('click', function(event) {
            const targetSpan = event.target.closest('.clickable-exercise');
            const targetButton = event.target.closest('.rep-time-btn'); // NEW: Check for rep/time button click
            const isMenuButtonClicked = event.target.closest('#menu-btn');
            const isLibraryModalContent = event.target.closest('.modal-content');
            const isDurationLabel = event.target.closest('label[for^="duration-"]');

            if (targetButton) {
                // --- Handle Rep/Time Button Click ---
                const currentMode = targetButton.dataset.mode;
                const inputField = targetButton.nextElementSibling; // Assumes input is immediately after button
                let nextMode = 'default';
                let buttonText = 'Reps/Time';
                let placeholderText = 'e.g., 15';

                if (currentMode === 'default') {
                    nextMode = 'reps';
                    buttonText = 'Reps';
                    placeholderText = 'Enter Reps';
                } else if (currentMode === 'reps') {
                    nextMode = 'time';
                    buttonText = 'Time';
                    placeholderText = 'Enter Time';
                } // else if (currentMode === 'time'), it cycles back to default

                targetButton.dataset.mode = nextMode;
                targetButton.textContent = buttonText;
                if (inputField && inputField.tagName === 'INPUT') {
                    inputField.placeholder = placeholderText;
                }
                hideTooltip(); // Hide tooltip when interacting with controls

            } else if (targetSpan) {
                // --- Handle Exercise Click (Tooltip) ---
                clearTimeout(targetSpan.clickTimeout);
                targetSpan.clickTimeout = setTimeout(() => {
                    if (currentTooltipTarget !== targetSpan) {
                        hideTooltip();
                        showTooltip(targetSpan);
                    } else {
                        hideTooltip();
                    }
                }, 200);

            } else if (!isMenuButtonClicked && !isLibraryModalContent && !isDurationLabel && !jsTooltip.matches(':hover') && !event.target.closest('.rep-time-controls')) {
                 // Click outside relevant elements: Hide tooltip
                hideTooltip();
            }
        });

        // Delegated DOUBLE-CLICK listener specifically for replacing exercises
        document.body.addEventListener('dblclick', function(event) {
            const targetSpan = event.target.closest('.clickable-exercise');
            if (targetSpan) {
                clearTimeout(targetSpan.clickTimeout); // Cancel the single-click tooltip timer
                hideTooltip(); // Hide tooltip immediately on double click
                replaceExercise(targetSpan); // Trigger replacement logic
            }
        });

        // Delegated MOUSEOUT listener to hide tooltip
        document.body.addEventListener('mouseout', function(event) {
            const targetIsClickable = event.target.closest('.clickable-exercise');
            const targetIsTooltip = event.target.closest('#js-tooltip');
            const relatedTargetIsClickable = event.relatedTarget && event.relatedTarget.closest('.clickable-exercise');
            const relatedTargetIsTooltip = event.relatedTarget && event.relatedTarget.closest('#js-tooltip');

            if ((targetIsClickable || targetIsTooltip) && !(relatedTargetIsClickable || relatedTargetIsTooltip)) {
                 setTimeout(() => {
                     if (!document.querySelector('.clickable-exercise:hover') && !document.querySelector('#js-tooltip:hover')) {
                          hideTooltip();
                     }
                 }, 100);
            }
        });

         // Listener for ESC key to close the modal
         document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape' && !libraryModal.classList.contains('hidden')) {
                hideLibrary();
            }
        });

    </script>
</body>
</html>
